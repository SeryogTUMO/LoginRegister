let HttpErrors,jwt;_5d9‍.x([["default",()=>_5d9‍.o]]);_5d9‍.w("http-errors",[["default",["HttpErrors"],function(v){HttpErrors=v}]]);_5d9‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);


const exclude = [
    'POST:/users/login',
    'POST:/users/register',
    'GET:/users/list',
]

function authorization(req, res, next) {
    try {
        const {originalUrl, method} = req;
        if (method === 'OPTIONS' || exclude.includes(method + ':' + originalUrl.replace(/\?.*/, ''))) {
            next();
            return;
        }
        const {authorization} = req.headers;
        let userId;
        try {
            const {JWT_SECRET} = process.env;
            const data = jwt.verify(authorization.replace('Bearer ', ''), JWT_SECRET)
            userId = data.userId
        } catch (e) {

        }
        if (!userId) {
            throw HttpErrors(401);
        }
        req.userId = userId;
        next();
    } catch (e) {
        next(e);
    }
}

_5d9‍.d(authorization);
