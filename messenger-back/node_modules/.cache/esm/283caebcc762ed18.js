let DataTypes,Model,md5,sequelize;_c76‍.x([["default",()=>_c76‍.o]]);_c76‍.w("sequelize",[["DataTypes",["DataTypes"],function(v){DataTypes=v}],["Model",["Model"],function(v){Model=v}]]);_c76‍.w("md5",[["default",["md5"],function(v){md5=v}]]);_c76‍.w("../services/sequelize",[["default",["sequelize"],function(v){sequelize=v}]]);



const { PASSWORD_SECRET } = process.env;

class Users extends Model {
  static hash = (str) => {
    return md5(md5(str) + PASSWORD_SECRET)
  }
}

Users.init({
  id: {
    type: DataTypes.BIGINT.UNSIGNED,
    allowNull: false,
    autoIncrement: true,
    primaryKey: true,
  },
  firstName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  lastName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  password: {
    type: DataTypes.CHAR(32),
    get() {
      return undefined;
    },
    set(val) {
      if (val) {
        this.setDataValue('password', Users.hash(val))
      }
    }
  },
}, {
  sequelize,
  tableName: 'users',
  modelName: 'users',
  indexes: [
    { fields: ['email'], unique: true }
  ]
})

_c76‍.d(Users);
